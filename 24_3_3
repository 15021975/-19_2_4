import requests
import json


# POST/pet (добавляем пэта)
def test_add_pet():
    input_pet = {
        "id": 123,
        "category": {
            "id": 22,
            "name": "Bolik"
        },
        "name": "doggie",
        "photoUrls": [
            "string"
        ],
        "tags": [
            {
                "id": 12,
                "name": "dog"
            }
        ],
        "status": "available"
    }
    header = {'accept': 'application/json', 'Content-Type': 'application/json'}
    res_post = requests.post(url='https://petstore.swagger.io/v2/pet', data=json.dumps(input_pet), headers=header)
    print(res_post.text)
    res_json = json.loads(res_post.text)
    assert input_pet == res_json

    # Проверим GET/pet/{petId} запросом, действительно ли там лежит наш добавленный пэт

    res_get = requests.get(url=f'https://petstore.swagger.io/v2/pet/{input_pet["id"]}')

    assert res_get.status_code == 200
    assert json.loads(res_get.text) == input_pet

    # DELETE удаляем добавленного пэта

    res_delete = requests.delete(url=f'https://petstore.swagger.io/v2/pet/{input_pet["id"]}')

    out_del = {
        "code": 200,
        "type": "unknown",
        "message": "123"
    }
    assert json.loads(res_delete.text) == out_del
    assert res_delete.status_code == 200
    # Проверим действительно ли удалился, делаем GET запрос
    # Задача получить статус код 404 . т.к такого питомца нет в базе
    res_get = requests.get(url=f'https://petstore.swagger.io/v2/pet/{input_pet["id"]}')

    assert res_get.status_code == 404

    # GET/pet/findByStatus
    # Проверим что наш питомец в available листе (проверяем статус)


def test_available_list():
    input_pet = {
        "id": 123455,
        "category": {
            "id": 22,
            "name": "Barsik"
        },
        "name": "cat",
        "photoUrls": [
            "string"
        ],
        "tags": [
            {
                "id": 12,
                "name": "dog"
            }
        ],
        "status": "available"
    }
    header = {'accept': 'application/json', 'Content-Type': 'application/json'}
    requests.post(url='https://petstore.swagger.io/v2/pet', data=json.dumps(input_pet), headers=header)

    res_get = requests.get(url='https://petstore.swagger.io/v2/pet/findByStatus', params={'status': 'available'})

    assert res_get.status_code == 200
    assert input_pet in list(json.loads(res_get.text))  # проверяем что наш пэт находится в листе со статусом avilable
    print(list(json.loads(res_get.text)))


# POST/pet/{petId}

def test_updates_name():
    header = {'accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded'}
    res_post = requests.post(url='https://petstore.swagger.io/v2/pet/123455', data={"name": "Murzik"}, headers=header)

    assert res_post.status_code == 200

    print(json.loads(res_post.text))
    print(res_post.text)


# PUT/pet изменение у уже имеющегося питомца

def test_update_put():
    input_pet = {
        "id": 123456,
        "category": {
            "id": 0,
            "name": "Koks"
        },
        "name": "doggie",
        "photoUrls": [
            "string"
        ],
        "tags": [
            {
                "id": 0,
                "name": "string"
            }
        ],
        "status": "available"
    }
    header = {'accept': 'application/json', 'Content-Type': 'application/json'}
    res_put = requests.post(url='https://petstore.swagger.io/v2/pet', data=json.dumps(input_pet),
                            headers=header)

    assert res_put.status_code == 200
    assert json.loads(res_put.text) == input_pet
    print(res_put.status_code)
    print(res_put.text)
